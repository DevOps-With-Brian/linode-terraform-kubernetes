on:
  pull_request:
    types:
      - opened
      - edited
      - synchronize
    branches:
      - main
jobs:
  validate_commit:
    name: Validating Commit Message
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{github.event.after}}
      - name: Get Commit Message
        run: |
          echo "MSG=$(git log --format=%B -n 1 ${{github.event.after}})" >> $GITHUB_ENV
      - name: Install Commitizen
        run: pip install -U Commitizen
      - name: Check For Valid Commit Message
        run: cz check -m "${{env.MSG }}"
  terraform_pr_checks:
    needs: validate_commit
    name: Checking For Folder Changes
    runs-on: ubuntu-latest
    outputs:
      dns_changes: ${{ steps.changed-files-dns.outputs.any_changed}}
      lke_changes: ${{ steps.changed-files-lke.outputs.any_changed}}
    steps:
    - uses: hashicorp/setup-terraform@v2
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Get changed files
      id: changed-files
      uses: tj-actions/changed-files@v34

    - name: List all changed files
      run: |
        for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
          echo "$file was changed"
        done

    - name: Check For Changes in lke folder
      id: changed-files-lke
      uses: tj-actions/changed-files@v34
      with:
        files: |
          lke/**

    - name: Check For Changes in dns folder
      id: changed-files-dns
      uses: tj-actions/changed-files@v34
      with:
        files: |
          dns/**

    - name: Run step if any file(s) in the lke folder change
      if: steps.changed-files-lke.outputs.any_changed == 'true'
      run: |
        echo "One or more files in the lke folder has changed."
        echo "List all the files that have changed: ${{ steps.changed-files-lke.outputs.all_changed_files }}"

    - name: Run step if any file(s) in the dns folder change
      if: steps.changed-files-dns.outputs.any_changed == 'true'
      run: |
        echo "One or more files in the dns folder has changed."
        echo "List all the files that have changed: ${{ steps.changed-files-dns.outputs.all_changed_files }}"

  terraform_dns_checks:
    needs: terraform_pr_checks
    if: ${{needs.terraform_pr_checks.outputs.dns_changes == 'true' }}
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: hashicorp/setup-terraform@v2
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    - name: Terraform fmt
      id: fmt
      run: terraform fmt -check
      continue-on-error: true

    - run: terraform init
      working-directory: ./dns

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color
      working-directory: ./dns

    - name: Terraform Plan
      id: plan
      working-directory: ./dns
      run: terraform plan -var="token=${{ secrets.TF_VAR_TOKEN }}" -var="nodebalancer_ip=${{ secrets.TF_VAR_nodebalancer_ip}}" -var="soa_email=${{ secrets.TF_VAR_soa_email}}" -var-file="terraform.tfvars" -no-color
      continue-on-error: true

    - uses: actions/github-script@v6
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
          <details><summary>Validation Output</summary>

          \`\`\`\n
          ${{ steps.validate.outputs.stdout }}
          \`\`\`

          </details>

          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`

          </details>

          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

  terraform_lke_checks:
    needs: terraform_pr_checks
    if: ${{needs.terraform_pr_checks.outputs.lke_changes == 'true' }}
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: hashicorp/setup-terraform@v2
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    - name: Terraform fmt
      id: fmt
      run: terraform fmt -check
      continue-on-error: true

    - run: terraform init
      working-directory: ./lke

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color
      working-directory: ./lke

    - name: Setup Kubeconfig
      working-directory: ./lke
      run: |
        export KUBE_VAR=${{ secrets.kube_config }} && echo $KUBE_VAR | base64 -di > kube-config

    - name: Terraform Plan
      id: plan
      working-directory: ./lke
      run: terraform plan -var="token=${{ secrets.TF_VAR_TOKEN }}" -var-file="terraform.tfvars" -no-color
      continue-on-error: true

    - uses: actions/github-script@v6
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
          <details><summary>Validation Output</summary>

          \`\`\`\n
          ${{ steps.validate.outputs.stdout }}
          \`\`\`

          </details>

          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`

          </details>

          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })